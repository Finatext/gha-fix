// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Finatext/gha-fix/internal/pin (interfaces: RepositoryService)
//
// Generated by this command:
//
//	mockgen -destination=./mock_repository_service.go -package=pin github.com/Finatext/gha-fix/internal/pin RepositoryService
//

// Package pin is a generated GoMock package.
package pin

import (
	context "context"
	reflect "reflect"

	github "github.com/google/go-github/v72/github"
	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryService is a mock of RepositoryService interface.
type MockRepositoryService struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryServiceMockRecorder
	isgomock struct{}
}

// MockRepositoryServiceMockRecorder is the mock recorder for MockRepositoryService.
type MockRepositoryServiceMockRecorder struct {
	mock *MockRepositoryService
}

// NewMockRepositoryService creates a new mock instance.
func NewMockRepositoryService(ctrl *gomock.Controller) *MockRepositoryService {
	mock := &MockRepositoryService{ctrl: ctrl}
	mock.recorder = &MockRepositoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryService) EXPECT() *MockRepositoryServiceMockRecorder {
	return m.recorder
}

// GetCommitSHA1 mocks base method.
func (m *MockRepositoryService) GetCommitSHA1(ctx context.Context, owner, repo, ref, lastSHA string) (string, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitSHA1", ctx, owner, repo, ref, lastSHA)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCommitSHA1 indicates an expected call of GetCommitSHA1.
func (mr *MockRepositoryServiceMockRecorder) GetCommitSHA1(ctx, owner, repo, ref, lastSHA any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitSHA1", reflect.TypeOf((*MockRepositoryService)(nil).GetCommitSHA1), ctx, owner, repo, ref, lastSHA)
}

// ListTags mocks base method.
func (m *MockRepositoryService) ListTags(ctx context.Context, owner, repo string, opts *github.ListOptions) ([]*github.RepositoryTag, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTags", ctx, owner, repo, opts)
	ret0, _ := ret[0].([]*github.RepositoryTag)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTags indicates an expected call of ListTags.
func (mr *MockRepositoryServiceMockRecorder) ListTags(ctx, owner, repo, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockRepositoryService)(nil).ListTags), ctx, owner, repo, opts)
}
